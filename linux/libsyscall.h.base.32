#ifndef _LIBSYSCALL_H
#define _LIBSYSCALL_H

// 32-bit only for this header
_Static_assert(sizeof(int) == 4, "int must be 32 bits");
_Static_assert(sizeof(void*) == 4, "pointer must be 32 bits");

typedef int lsc_int_t;
typedef unsigned int lsc_uint_t;
#define LSC_LINUX
#define LSC_32BIT

extern lsc_int_t _lsc_syscall0(lsc_int_t eax);
extern lsc_int_t _lsc_syscall1(lsc_int_t eax, lsc_int_t ebx);
extern lsc_int_t _lsc_syscall2(lsc_int_t eax, lsc_int_t ebx, lsc_int_t ecx);
extern lsc_int_t _lsc_syscall3(lsc_int_t eax, lsc_int_t ebx, lsc_int_t ecx, lsc_int_t edx);
extern lsc_int_t _lsc_syscall4(lsc_int_t eax, lsc_int_t ebx, lsc_int_t ecx, lsc_int_t edx, lsc_int_t esi);
extern lsc_int_t _lsc_syscall5(lsc_int_t eax, lsc_int_t ebx, lsc_int_t ecx, lsc_int_t edx, lsc_int_t esi, lsc_int_t edi);

extern lsc_int_t lsc_deep_call(void (*target)(void *), void *param, void **saveaddr); // return true if returned normally; false if deep_return was used
extern void lsc_deep_return(void *loadaddr) __attribute__((noreturn));

extern int _lsc_client_main(lsc_uint_t argc, char **argv, char **env);

#define LSC_MAIN(argc, argv, env) int _lsc_client_main(lsc_uint_t argc, char **argv, char **env)

/* FOOTER */

#endif
